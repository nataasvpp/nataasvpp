/* Copyright (c) 2022 Cisco and/or its affiliates. */

option version = "0.0.1";
import "vnet/ip/ip_types.api";
import "plugins/vcdp/vcdp_types.api";

enumflag vcdp_tenant_flags {
  NO_CREATE = 0x1,
};

autoreply autoendian define vcdp_tenant_add_del
{
  u32 client_index;
  u32 context;

  u32 tenant_id;
  u32 context_id [default=0xffffffff]; // TODO: Should it be here?
  vl_api_vcdp_tenant_flags_t flags;  
  bool is_add;
};

autoreply autoendian define vcdp_set_services
{
  u32 client_index;
  u32 context;

  u32 tenant_id;
  vl_api_vcdp_session_direction_t dir;
  u8 n_services;
  vl_api_vcdp_service_name_t services[n_services];
};

autoreply autoendian define vcdp_session_add
{
  u32 client_index;
  u32 context;

  u32 tenant_id;
  vl_api_address_t src;
  vl_api_address_t dst;
  u8 protocol;
  u16 sport;
  u16 dport;
};

define vcdp_session_dump
{
  u32 client_index;
  u32 context;
};

define vcdp_session_details
{
  u32 context;
  
  u64 session_id;
  u32 thread_index;
  u32 tenant_id;
  u32 session_idx;
  vl_api_vcdp_session_type_t session_type;
  vl_api_ip_proto_t protocol;
  vl_api_vcdp_session_state_t state;
  f64 remaining_time;
/* Avoid service strings to keep it compact */
  u32 forward_bitmap;
  u32 reverse_bitmap;
  u8 n_keys;
  vl_api_vcdp_session_key_t keys[n_keys];
};

define vcdp_tenant_dump
{
  u32 client_index;
  u32 context;
};

define vcdp_tenant_details
{
  u32 context;

  u32 index;
  u32 context_id;
  u32 forward_bitmap;
  u32 reverse_bitmap;
  u32 n_timeout;
  u32 timeout[n_timeout];
};

autoreply define vcdp_set_timeout
{
  u32 client_index;
  u32 context;

  u32 tenant_id;
  u32 timeout_id;
  u32 timeout_value;
};
