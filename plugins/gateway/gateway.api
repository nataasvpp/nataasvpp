// Copyright(c) 2022 Cisco Systems, Inc.

option version = "0.0.1";

import "vnet/ip/ip_types.api";
import "vnet/ethernet/ethernet_types.api";
import "vnet/interface_types.api";

enum vcdp_tunnel_method : u8
{
  VL_API_VCDP_TUNNEL_VXLAN_DUMMY_L2 = 0,
  VL_API_VCDP_TUNNEL_GENEVE_L3 = 1,
};

autoreply autoendian define vcdp_tunnel_add
{
  // header
  u32 client_index;
  u32 context;

  string tunnel_id[37];
  u16 tenant_id;
  vl_api_vcdp_tunnel_method_t method;
  vl_api_address_t src;
  vl_api_address_t dst;
  u16 sport; // 0 == any
  u16 dport;
  vl_api_mac_address_t src_mac;
  vl_api_mac_address_t dst_mac;
  u16 mtu;
};

autoreply autoendian define vcdp_tunnel_remove
{
  // header
  u32 client_index;
  u32 context;

  string tunnel_id[37]; // UUID
};

/*
 * Attach/Detach VCDP to the IPv4 input feature arc.
 */
autoreply autoendian define vcdp_gateway_enable_disable
{
  u32 client_index;
  u32 context;

  vl_api_interface_index_t sw_if_index;
  u16 tenant_id;
  bool is_enable;
};

/*
 * Enable/Disable VCDP tunnel decapsulation from the IPv4 input feature arc.
 */
autoreply autoendian define vcdp_gateway_tunnel_enable_disable
{
  u32 client_index;
  u32 context;

  vl_api_interface_index_t sw_if_index;
  bool is_enable;
};